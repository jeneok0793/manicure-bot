from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_CHAT_ID
from google_sheets import (
    get_available_slots, book_slot, get_user_bookings,
    cancel_booking_by_row, add_free_client_entry, clients_sheet
)
from keyboards import (
    get_main_keyboard, get_booking_date_keyboard, create_time_service_keyboard,
    get_cancel_confirm_keyboard, get_select_booking_keyboard,
    get_admin_main_keyboard, get_admin_slot_manage_keyboard, notify_admin
)

router = Router()

class BookingStates(StatesGroup):
    choosing_date = State()
    entering_name = State()
    entering_phone = State()
    confirm_booking = State()

class CancellationStates(StatesGroup):
    choosing_booking_to_cancel = State()
    confirming_cancellation = State()

class AdminStates(StatesGroup):
    main_admin_menu = State()
    managing_slot = State()
    entering_slot_to_hide = State()
    entering_slot_to_show = State()
    adding_free_client = State()

@router.message(F.text == "/start")
async def handle_start(message: types.Message, state: FSMContext):
    await state.clear()
    is_admin = str(message.from_user.id) == str(ADMIN_CHAT_ID)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É –º–∞–Ω–∏–∫—é—Ä–∞ üíÖ\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.",
        reply_markup=get_main_keyboard(is_admin)
    )

@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def handle_book_appointment(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=get_booking_date_keyboard())
    await state.set_state(BookingStates.choosing_date)

@router.callback_query(BookingStates.choosing_date, F.data.startswith("select_date_"))
async def process_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
    selected_date_str = callback_query.data.split("_")[2]
    all_available_slots = get_available_slots(day_offset=0)
    available_slots_for_day = [
        s for s in all_available_slots if s["–¥–∞—Ç–∞"] == selected_date_str
    ]
    if not available_slots_for_day:
        await callback_query.message.edit_text(
            f"‚ùå –ù–∞ {selected_date_str} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            reply_markup=get_booking_date_keyboard()
        )
        await state.set_state(BookingStates.choosing_date)
    else:
        await state.update_data(selected_date=selected_date_str)
        await callback_query.message.edit_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: *{selected_date_str}*\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ —É—Å–ª—É–≥—É:",
            reply_markup=create_time_service_keyboard(available_slots_for_day),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BookingStates.confirm_booking)
    await callback_query.answer()

@router.callback_query(BookingStates.confirm_booking, F.data.startswith("book_"))
async def process_time_service_selection(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split("_")
    booking_date = parts[1]
    booking_time = parts[2]
    booking_service = parts[3]
    await state.update_data(
        booking_date=booking_date,
        booking_time=booking_time,
        booking_service=booking_service
    )
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{booking_date}* –≤ *{booking_time}* –Ω–∞ —É—Å–ª—É–≥—É *{booking_service}*.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ò–º—è* –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BookingStates.entering_name)
    await callback_query.answer()

@router.message(BookingStates.entering_name)
async def process_name_input(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(user_name=user_name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +373xxxxxxxxx):",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BookingStates.entering_phone)

@router.message(BookingStates.entering_phone)
async def process_phone_input(message: types.Message, state: FSMContext):
    user_phone = message.text
    if not user_phone.strip():
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    data = await state.get_data()
    booking_date = data.get("booking_date")
    booking_time = data.get("booking_time")
    booking_service = data.get("booking_service")
    user_name = data.get("user_name")
    telegram_id = str(message.from_user.id)

    booked_info = book_slot(telegram_id, user_name, user_phone, booking_date, booking_time, booking_service)

    if booked_info:
        await message.answer(
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ!* –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞:\n"
            f"üìÖ –î–∞—Ç–∞: *{booking_date}*\n"
            f"üïí –í—Ä–µ–º—è: *{booking_time}*\n"
            f"üíÖ –£—Å–ª—É–≥–∞: *{booking_service}*\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏! üå∏",
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_main_keyboard(str(message.from_user.id) == str(ADMIN_CHAT_ID))
        )
        admin_message = (
            f"üìå *–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!*\n"
            f"üßë‚Äçüíª –ö–ª–∏–µ–Ω—Ç: {user_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{user_phone}`\n"
            f"üÜî Telegram ID: `{telegram_id}`\n"
            f"üìÖ –î–∞—Ç–∞: *{booking_date}*\n"
            f"üïí –í—Ä–µ–º—è: *{booking_time}*\n"
            f"üíÖ –£—Å–ª—É–≥–∞: *{booking_service}*"
        )
        await notify_admin(message.bot, admin_message)
    else:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(str(message.from_user.id) == str(ADMIN_CHAT_ID))
        )
    await state.clear()
